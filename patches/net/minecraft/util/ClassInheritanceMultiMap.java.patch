--- ../src-base/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
+++ ../src-work/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -4,25 +4,31 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import org.threadly.concurrent.collections.ConcurrentArrayList;
+
 import java.util.AbstractSet;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class ClassInheritanceMultiMap<T> extends AbstractSet<T>
 {
-    private static final Set < Class<? >> ALL_KNOWN = Sets. < Class<? >> newHashSet();
-    private final Map < Class<?>, List<T >> map = Maps. < Class<?>, List<T >> newHashMap();
+    // Forge: Use concurrent collection to allow creating chunks from multiple threads safely
+    private static final Set < Class<? >> ALL_KNOWN = Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap<Class<?>, Boolean>());
+    private final Map < Class<?>, List<T >> map = new ConcurrentHashMap<>();
     private final Set < Class<? >> knownKeys = Sets. < Class<? >> newIdentityHashSet();
     private final Class<T> baseClass;
-    private final List<T> values = Lists.<T>newArrayList();
+    private final List<T> values = new ConcurrentArrayList<>();
 
     public ClassInheritanceMultiMap(Class<T> baseClassIn)
     {
         this.baseClass = baseClassIn;
-        this.knownKeys.add(baseClassIn);
+        synchronized (this.knownKeys){
+            this.knownKeys.add(baseClassIn);
+        }
         this.map.put(baseClassIn, this.values);
 
         for (Class<?> oclass : ALL_KNOWN)
@@ -42,17 +48,19 @@
                 this.addForClass(t, clazz);
             }
         }
-
-        this.knownKeys.add(clazz);
+        synchronized (this.knownKeys) {
+            this.knownKeys.add(clazz);
+        }
     }
 
     protected Class<?> initializeClassLookup(Class<?> clazz)
     {
         if (this.baseClass.isAssignableFrom(clazz))
         {
-            if (!this.knownKeys.contains(clazz))
-            {
-                this.createLookup(clazz);
+            synchronized (this.knownKeys) {
+                if (!this.knownKeys.contains(clazz)) {
+                    this.createLookup(clazz);
+                }
             }
 
             return clazz;
@@ -65,11 +73,11 @@
 
     public boolean add(T p_add_1_)
     {
-        for (Class<?> oclass : this.knownKeys)
-        {
-            if (oclass.isAssignableFrom(p_add_1_.getClass()))
-            {
-                this.addForClass(p_add_1_, oclass);
+        synchronized (this.knownKeys) {
+            for (Class<?> oclass : this.knownKeys) {
+                if (oclass.isAssignableFrom(p_add_1_.getClass())) {
+                    this.addForClass(p_add_1_, oclass);
+                }
             }
         }
 
@@ -94,16 +102,14 @@
     {
         T t = (T)p_remove_1_;
         boolean flag = false;
+        synchronized (this.knownKeys) {
+            for (Class<?> oclass : this.knownKeys) {
+                if (oclass.isAssignableFrom(t.getClass())) {
+                    List<T> list = (List) this.map.get(oclass);
 
-        for (Class<?> oclass : this.knownKeys)
-        {
-            if (oclass.isAssignableFrom(t.getClass()))
-            {
-                List<T> list = (List)this.map.get(oclass);
-
-                if (list != null && list.remove(t))
-                {
-                    flag = true;
+                    if (list != null && list.remove(t)) {
+                        flag = true;
+                    }
                 }
             }
         }
@@ -122,6 +128,17 @@
         {
             public Iterator<S> iterator()
             {
+                // CatServer start - Optimization from Foamfix
+                Class c = ClassInheritanceMultiMap.this.initializeClassLookup(clazz);
+                List<T> list = ClassInheritanceMultiMap.this.map.get(c);
+                if (list == null) {
+                    return Collections.emptyIterator();
+                } else {
+                    Iterator<T> iterator = list.iterator();
+                    return clazz == c ? (Iterator<S>) iterator : Iterators.filter(iterator, clazz);
+                }
+                // CatServer end
+                /*
                 List<T> list = (List)ClassInheritanceMultiMap.this.map.get(ClassInheritanceMultiMap.this.initializeClassLookup(clazz));
 
                 if (list == null)
@@ -133,6 +150,7 @@
                     Iterator<T> iterator = list.iterator();
                     return Iterators.filter(iterator, clazz);
                 }
+                */
             }
         };
     }
