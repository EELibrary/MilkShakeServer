--- ../src-base/minecraft/net/minecraft/pathfinding/WalkNodeProcessor.java
+++ ../src-work/minecraft/net/minecraft/pathfinding/WalkNodeProcessor.java
@@ -14,6 +14,7 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.init.Blocks;
+import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
@@ -23,6 +24,7 @@
 public class WalkNodeProcessor extends NodeProcessor
 {
     protected float avoidsWater;
+    protected EntityLiving currentEntity;
 
     public void init(IBlockAccess sourceIn, EntityLiving mob)
     {
@@ -184,11 +186,14 @@
     }
 
     @Nullable
-    private PathPoint getSafePoint(int x, int y, int z, int p_186332_4_, double p_186332_5_, EnumFacing facing)
+    private synchronized PathPoint getSafePoint(int x, int y, int z, int p_186332_4_, double p_186332_5_, EnumFacing facing)
     {
         PathPoint pathpoint = null;
         BlockPos blockpos = new BlockPos(x, y, z);
         BlockPos blockpos1 = blockpos.down();
+        if (this.blockaccess == null){
+            return null;
+        }
         double d0 = (double)y - (1.0D - this.blockaccess.getBlockState(blockpos1).getBoundingBox(this.blockaccess, blockpos1).maxY);
 
         if (d0 - p_186332_5_ > 1.125D)
@@ -237,11 +242,19 @@
                 {
                     AxisAlignedBB axisalignedbb3 = new AxisAlignedBB((double)x - d1 + 0.5D, (double)y + 0.001D, (double)z - d1 + 0.5D, (double)x + d1 + 0.5D, (double)((float)y + this.entity.height), (double)z + d1 + 0.5D);
 
+                    if (this.entity == null){
+                        return null;
+                    }
+
                     if (this.entity.world.collidesWithAnyBlock(axisalignedbb3))
                     {
                         return null;
                     }
 
+                    if (this.entity == null){
+                        return null;
+                    }
+
                     if (this.entity.width >= 1.0F)
                     {
                         PathNodeType pathnodetype1 = this.getPathNodeType(this.entity, x, y - 1, z);
@@ -271,6 +284,7 @@
 
                         if (pathnodetype != PathNodeType.OPEN && f >= 0.0F)
                         {
+                            if (pathpoint == null)continue;
                             pathpoint = this.openPoint(x, y, z);
                             pathpoint.nodeType = pathnodetype;
                             pathpoint.costMalus = Math.max(pathpoint.costMalus, f);
@@ -291,11 +305,16 @@
 
     public PathNodeType getPathNodeType(IBlockAccess blockaccessIn, int x, int y, int z, EntityLiving entitylivingIn, int xSize, int ySize, int zSize, boolean canBreakDoorsIn, boolean canEnterDoorsIn)
     {
+        if (entitylivingIn == null){
+            return PathNodeType.BLOCKED;
+        }
         EnumSet<PathNodeType> enumset = EnumSet.<PathNodeType>noneOf(PathNodeType.class);
         PathNodeType pathnodetype = PathNodeType.BLOCKED;
         double d0 = (double)entitylivingIn.width / 2.0D;
         BlockPos blockpos = new BlockPos(entitylivingIn);
+        this.currentEntity = entitylivingIn;
         pathnodetype = this.getPathNodeType(blockaccessIn, x, y, z, xSize, ySize, zSize, canBreakDoorsIn, canEnterDoorsIn, enumset, pathnodetype, blockpos);
+        this.currentEntity = null;
 
         if (enumset.contains(PathNodeType.FENCE))
         {
@@ -329,7 +348,7 @@
         }
     }
 
-    public PathNodeType getPathNodeType(IBlockAccess p_193577_1_, int x, int y, int z, int xSize, int ySize, int zSize, boolean canOpenDoorsIn, boolean canEnterDoorsIn, EnumSet<PathNodeType> p_193577_10_, PathNodeType p_193577_11_, BlockPos p_193577_12_)
+    public synchronized PathNodeType getPathNodeType(IBlockAccess p_193577_1_, int x, int y, int z, int xSize, int ySize, int zSize, boolean canOpenDoorsIn, boolean canEnterDoorsIn, EnumSet<PathNodeType> p_193577_10_, PathNodeType p_193577_11_, BlockPos p_193577_12_)
     {
         for (int i = 0; i < xSize; ++i)
         {
@@ -399,6 +418,8 @@
             {
                 pathnodetype = PathNodeType.DAMAGE_CACTUS;
             }
+
+            if (pathnodetype1 == PathNodeType.DAMAGE_OTHER) pathnodetype = PathNodeType.DAMAGE_OTHER;
         }
 
         pathnodetype = this.checkNeighborBlocks(blockaccessIn, x, y, z, pathnodetype);
@@ -417,16 +438,19 @@
                 {
                     if (i != 0 || j != 0)
                     {
-                        Block block = p_193578_1_.getBlockState(blockpos$pooledmutableblockpos.setPos(i + p_193578_2_, p_193578_3_, j + p_193578_4_)).getBlock();
+                        IBlockState state = p_193578_1_.getBlockState(blockpos$pooledmutableblockpos.setPos(i + p_193578_2_, p_193578_3_, j + p_193578_4_));
+                        Block block = state.getBlock();
+                        PathNodeType type = block.getAiPathNodeType(state, p_193578_1_, blockpos$pooledmutableblockpos, this.currentEntity);
 
-                        if (block == Blocks.CACTUS)
+                        if (block == Blocks.CACTUS || type == PathNodeType.DAMAGE_CACTUS)
                         {
                             p_193578_5_ = PathNodeType.DANGER_CACTUS;
                         }
-                        else if (block == Blocks.FIRE)
+                        else if (block == Blocks.FIRE || type == PathNodeType.DAMAGE_FIRE)
                         {
                             p_193578_5_ = PathNodeType.DANGER_FIRE;
                         }
+                        else if (type == PathNodeType.DAMAGE_OTHER) p_193578_5_ = PathNodeType.DANGER_OTHER;
                     }
                 }
             }
@@ -443,6 +467,9 @@
         Block block = iblockstate.getBlock();
         Material material = iblockstate.getMaterial();
 
+        PathNodeType type = block.getAiPathNodeType(iblockstate, p_189553_1_, blockpos, this.currentEntity);
+        if (type != null) return type;
+
         if (material == Material.AIR)
         {
             return PathNodeType.OPEN;
