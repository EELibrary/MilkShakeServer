--- ../src-base/minecraft/net/minecraft/pathfinding/WalkNodeProcessor.java
+++ ../src-work/minecraft/net/minecraft/pathfinding/WalkNodeProcessor.java
@@ -14,6 +14,7 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.init.Blocks;
+import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
@@ -23,6 +24,7 @@
 public class WalkNodeProcessor extends NodeProcessor
 {
     protected float avoidsWater;
+    protected EntityLiving currentEntity;
 
     public void init(IBlockAccess sourceIn, EntityLiving mob)
     {
@@ -237,11 +239,19 @@
                 {
                     AxisAlignedBB axisalignedbb3 = new AxisAlignedBB((double)x - d1 + 0.5D, (double)y + 0.001D, (double)z - d1 + 0.5D, (double)x + d1 + 0.5D, (double)((float)y + this.entity.height), (double)z + d1 + 0.5D);
 
+                    if (this.entity == null){
+                        return null;
+                    }
+
                     if (this.entity.world.collidesWithAnyBlock(axisalignedbb3))
                     {
                         return null;
                     }
 
+                    if (this.entity == null){
+                        return null;
+                    }
+
                     if (this.entity.width >= 1.0F)
                     {
                         PathNodeType pathnodetype1 = this.getPathNodeType(this.entity, x, y - 1, z);
@@ -295,7 +305,9 @@
         PathNodeType pathnodetype = PathNodeType.BLOCKED;
         double d0 = (double)entitylivingIn.width / 2.0D;
         BlockPos blockpos = new BlockPos(entitylivingIn);
+        this.currentEntity = entitylivingIn;
         pathnodetype = this.getPathNodeType(blockaccessIn, x, y, z, xSize, ySize, zSize, canBreakDoorsIn, canEnterDoorsIn, enumset, pathnodetype, blockpos);
+        this.currentEntity = null;
 
         if (enumset.contains(PathNodeType.FENCE))
         {
@@ -399,6 +411,8 @@
             {
                 pathnodetype = PathNodeType.DAMAGE_CACTUS;
             }
+
+            if (pathnodetype1 == PathNodeType.DAMAGE_OTHER) pathnodetype = PathNodeType.DAMAGE_OTHER;
         }
 
         pathnodetype = this.checkNeighborBlocks(blockaccessIn, x, y, z, pathnodetype);
@@ -417,16 +431,19 @@
                 {
                     if (i != 0 || j != 0)
                     {
-                        Block block = p_193578_1_.getBlockState(blockpos$pooledmutableblockpos.setPos(i + p_193578_2_, p_193578_3_, j + p_193578_4_)).getBlock();
+                        IBlockState state = p_193578_1_.getBlockState(blockpos$pooledmutableblockpos.setPos(i + p_193578_2_, p_193578_3_, j + p_193578_4_));
+                        Block block = state.getBlock();
+                        PathNodeType type = block.getAiPathNodeType(state, p_193578_1_, blockpos$pooledmutableblockpos, this.currentEntity);
 
-                        if (block == Blocks.CACTUS)
+                        if (block == Blocks.CACTUS || type == PathNodeType.DAMAGE_CACTUS)
                         {
                             p_193578_5_ = PathNodeType.DANGER_CACTUS;
                         }
-                        else if (block == Blocks.FIRE)
+                        else if (block == Blocks.FIRE || type == PathNodeType.DAMAGE_FIRE)
                         {
                             p_193578_5_ = PathNodeType.DANGER_FIRE;
                         }
+                        else if (type == PathNodeType.DAMAGE_OTHER) p_193578_5_ = PathNodeType.DANGER_OTHER;
                     }
                 }
             }
@@ -443,6 +460,9 @@
         Block block = iblockstate.getBlock();
         Material material = iblockstate.getMaterial();
 
+        PathNodeType type = block.getAiPathNodeType(iblockstate, p_189553_1_, blockpos, this.currentEntity);
+        if (type != null) return type;
+
         if (material == Material.AIR)
         {
             return PathNodeType.OPEN;
