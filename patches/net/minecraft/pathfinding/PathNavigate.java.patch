--- ../src-base/minecraft/net/minecraft/pathfinding/PathNavigate.java
+++ ../src-work/minecraft/net/minecraft/pathfinding/PathNavigate.java
@@ -8,6 +8,7 @@
 import net.minecraft.entity.SharedMonsterAttributes;
 import net.minecraft.entity.ai.attributes.IAttributeInstance;
 import net.minecraft.init.Blocks;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
@@ -22,11 +23,11 @@
     @Nullable
     protected Path currentPath;
     protected double speed;
-    private final IAttributeInstance pathSearchRange;
+    public final IAttributeInstance pathSearchRange;
     protected int totalTicks;
     private int ticksAtLastPos;
-    private Vec3d lastPosCheck = Vec3d.ZERO;
-    private Vec3d timeoutCachedNode = Vec3d.ZERO;
+    public Vec3d lastPosCheck = Vec3d.ZERO; // CatServer - private -> public
+    public Vec3d timeoutCachedNode = Vec3d.ZERO; // CatServer - private -> public
     private long timeoutTimer;
     private long lastTimeoutCheck;
     private double timeoutLimit;
@@ -37,7 +38,7 @@
     private BlockPos targetPos;
     private final PathFinder pathFinder;
 
-    public PathNavigate(EntityLiving entityIn, World worldIn)
+    public  PathNavigate(EntityLiving entityIn, World worldIn)
     {
         this.entity = entityIn;
         this.world = worldIn;
@@ -47,22 +48,22 @@
 
     protected abstract PathFinder getPathFinder();
 
-    public void setSpeed(double speedIn)
+    public synchronized void setSpeed(double speedIn)
     {
         this.speed = speedIn;
     }
 
-    public float getPathSearchRange()
+    public synchronized float getPathSearchRange()
     {
         return (float)this.pathSearchRange.getAttributeValue();
     }
 
-    public boolean canUpdatePathOnTimeout()
+    public synchronized boolean canUpdatePathOnTimeout()
     {
         return this.tryUpdatePath;
     }
 
-    public void updatePath()
+    public synchronized void updatePath()
     {
         if (this.world.getTotalWorldTime() - this.lastTimeUpdated > 20L)
         {
@@ -81,13 +82,13 @@
     }
 
     @Nullable
-    public final Path getPathToXYZ(double x, double y, double z)
+    public final synchronized Path getPathToXYZ(double x, double y, double z)
     {
         return this.getPathToPos(new BlockPos(x, y, z));
     }
 
     @Nullable
-    public Path getPathToPos(BlockPos pos)
+    public synchronized Path getPathToPos(BlockPos pos)
     {
         if (!this.canNavigate())
         {
@@ -112,7 +113,7 @@
     }
 
     @Nullable
-    public Path getPathToEntityLiving(Entity entityIn)
+    public synchronized Path getPathToEntityLiving(Entity entityIn)
     {
         if (!this.canNavigate())
         {
@@ -141,18 +142,36 @@
         }
     }
 
-    public boolean tryMoveToXYZ(double x, double y, double z, double speedIn)
+    public synchronized boolean tryMoveToXYZ(double x, double y, double z, double speedIn)
     {
         return this.setPath(this.getPathToXYZ(x, y, z), speedIn);
     }
 
-    public boolean tryMoveToEntityLiving(Entity entityIn, double speedIn)
+    public synchronized boolean tryMoveToEntityLiving(Entity entityIn, double speedIn)
     {
+        // Paper start - Pathfinding optimizations
+        if (this.pathfindFailures > 10 && this.currentPath == null && MinecraftServer.currentTick < this.lastFailure + 40) {
+            return false;
+        }
+
         Path path = this.getPathToEntityLiving(entityIn);
-        return path != null && this.setPath(path, speedIn);
+
+        if (path != null && this.setPath(path, speedIn)) {
+            this.lastFailure = 0;
+            this.pathfindFailures = 0;
+            return true;
+        } else {
+            this.pathfindFailures++;
+            this.lastFailure = MinecraftServer.currentTick;
+            return false;
+        }
+
     }
+    private int lastFailure = 0;
+    private int pathfindFailures = 0;
+    // Paper end
 
-    public boolean setPath(@Nullable Path pathentityIn, double speedIn)
+    public synchronized boolean setPath(@Nullable Path pathentityIn, double speedIn)
     {
         if (pathentityIn == null)
         {
@@ -184,12 +203,12 @@
     }
 
     @Nullable
-    public Path getPath()
+    public synchronized Path getPath()
     {
         return this.currentPath;
     }
 
-    public void onUpdateNavigation()
+    public synchronized void onUpdateNavigation()
     {
         ++this.totalTicks;
 
@@ -258,8 +277,16 @@
         int l = MathHelper.ceil(this.entity.height);
         int i1 = k;
 
+        if (this.currentPath == null){
+            this.checkForStuck(vec3d);
+            return;
+        }
+
         for (int j1 = i - 1; j1 >= this.currentPath.getCurrentPathIndex(); --j1)
         {
+            if (this.currentPath == null){
+                continue;
+            }
             if (this.isDirectPathBetweenPoints(vec3d, this.currentPath.getVectorFromIndex(this.entity, j1), k, l, i1))
             {
                 this.currentPath.setCurrentPathIndex(j1);
@@ -310,13 +337,14 @@
         }
     }
 
-    public boolean noPath()
+    public synchronized boolean noPath()
     {
         return this.currentPath == null || this.currentPath.isFinished();
     }
 
-    public void clearPath()
+    public synchronized void clearPath()
     {
+        this.pathfindFailures = 0; this.lastFailure = 0; // Paper - Pathfinding optimizations
         this.currentPath = null;
     }
 
@@ -355,12 +383,12 @@
 
     protected abstract boolean isDirectPathBetweenPoints(Vec3d posVec31, Vec3d posVec32, int sizeX, int sizeY, int sizeZ);
 
-    public boolean canEntityStandOnPos(BlockPos pos)
+    public synchronized boolean canEntityStandOnPos(BlockPos pos)
     {
         return this.world.getBlockState(pos.down()).isFullBlock();
     }
 
-    public NodeProcessor getNodeProcessor()
+    public synchronized NodeProcessor getNodeProcessor()
     {
         return this.nodeProcessor;
     }
