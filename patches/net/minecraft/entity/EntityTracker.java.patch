--- ../src-base/minecraft/net/minecraft/entity/EntityTracker.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityTracker.java
@@ -4,6 +4,10 @@
 import com.google.common.collect.Sets;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ForkJoinPool;
+
+import gg.eilsapgroup.milkshake.MKConfig;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
@@ -47,19 +51,20 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.prawa.simpleutils.concurrent.forkjointasks.ParallelListTraverse;
 
 public class EntityTracker
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final WorldServer world;
-    private final Set<EntityTrackerEntry> entries = Sets.<EntityTrackerEntry>newHashSet();
-    private final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
+    private final Set<EntityTrackerEntry> entries = ConcurrentHashMap.newKeySet();
+    public final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
     private int maxTrackingDistanceThreshold;
 
     public EntityTracker(WorldServer theWorldIn)
     {
         this.world = theWorldIn;
-        this.maxTrackingDistanceThreshold = theWorldIn.getMinecraftServer().getPlayerList().getEntityViewDistance();
+        this.maxTrackingDistanceThreshold = net.minecraft.server.management.PlayerChunkMap.getFurthestViewableBlock(theWorldIn.spigotConfig.viewDistance); // Spigot
     }
 
     public static long getPositionLong(double value)
@@ -77,6 +82,8 @@
 
     public void track(Entity entityIn)
     {
+        if (net.minecraftforge.fml.common.registry.EntityRegistry.instance().tryTrackingEntity(this, entityIn)) return;
+
         if (entityIn instanceof EntityPlayerMP)
         {
             this.track(entityIn, 512, 2);
@@ -196,7 +203,7 @@
         }
         else if (entityIn instanceof EntityAreaEffectCloud)
         {
-            this.track(entityIn, 160, Integer.MAX_VALUE, true);
+            this.track(entityIn, 160, 10 /*Integer.MAX_VALUE*/, true); // CraftBukkit
         }
         else if (entityIn instanceof EntityEnderCrystal)
         {
@@ -215,13 +222,14 @@
 
     public void track(Entity entityIn, int trackingRange, final int updateFrequency, boolean sendVelocityUpdates)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+        trackingRange = org.spigotmc.TrackingRange.getEntityTrackingRange(entityIn, trackingRange); // Spigot
         try
         {
             if (this.trackedEntityHashTable.containsItem(entityIn.getEntityId()))
             {
-                throw new IllegalStateException("Entity is already tracked!");
+                return;
             }
-
             EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(entityIn, trackingRange, this.maxTrackingDistanceThreshold, updateFrequency, sendVelocityUpdates);
             this.entries.add(entitytrackerentry);
             this.trackedEntityHashTable.addKey(entityIn.getEntityId(), entitytrackerentry);
@@ -229,39 +237,13 @@
         }
         catch (Throwable throwable)
         {
-            CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Adding entity to track");
-            CrashReportCategory crashreportcategory = crashreport.makeCategory("Entity To Track");
-            crashreportcategory.addCrashSection("Tracking range", trackingRange + " blocks");
-            crashreportcategory.addDetail("Update interval", new ICrashReportDetail<String>()
-            {
-                public String call() throws Exception
-                {
-                    String s = "Once per " + updateFrequency + " ticks";
-
-                    if (updateFrequency == Integer.MAX_VALUE)
-                    {
-                        s = "Maximum (" + s + ")";
-                    }
-
-                    return s;
-                }
-            });
-            entityIn.addEntityCrashInfo(crashreportcategory);
-            ((EntityTrackerEntry)this.trackedEntityHashTable.lookup(entityIn.getEntityId())).getTrackedEntity().addEntityCrashInfo(crashreport.makeCategory("Entity That Is Already Tracked"));
-
-            try
-            {
-                throw new ReportedException(crashreport);
-            }
-            catch (ReportedException reportedexception)
-            {
-                LOGGER.error("\"Silently\" catching entity tracking error.", (Throwable)reportedexception);
-            }
+            throwable.printStackTrace();
         }
     }
 
     public void untrack(Entity entityIn)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
         if (entityIn instanceof EntityPlayerMP)
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)entityIn;
@@ -281,37 +263,34 @@
         }
     }
 
+    private static final ForkJoinPool trackerExecutor = new ForkJoinPool(MKConfig.executorConfig.getInt("tracker-worker-threads"),MKConfig.serverWorkerFactory,null,true);
+
     public void tick()
     {
-        List<EntityPlayerMP> list = Lists.<EntityPlayerMP>newArrayList();
+        ParallelListTraverse<EntityTrackerEntry> task = new ParallelListTraverse<>(this.entries,trackerExecutor.getParallelism(),entitytrackerentry->{
+            MKConfig.workerGroup.regThread();
+            try{
+                entitytrackerentry.updatePlayerList(this.world.playerEntities);
 
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
-            entitytrackerentry.updatePlayerList(this.world.playerEntities);
-
-            if (entitytrackerentry.playerEntitiesUpdated)
-            {
-                Entity entity = entitytrackerentry.getTrackedEntity();
-
-                if (entity instanceof EntityPlayerMP)
+                if (entitytrackerentry.playerEntitiesUpdated)
                 {
-                    list.add((EntityPlayerMP)entity);
-                }
-            }
-        }
+                    Entity entity = entitytrackerentry.getTrackedEntity();
 
-        for (int i = 0; i < list.size(); ++i)
-        {
-            EntityPlayerMP entityplayermp = list.get(i);
-
-            for (EntityTrackerEntry entitytrackerentry1 : this.entries)
-            {
-                if (entitytrackerentry1.getTrackedEntity() != entityplayermp)
-                {
-                    entitytrackerentry1.updatePlayerEntity(entityplayermp);
+                    if (entity instanceof EntityPlayerMP)
+                    {
+                        EntityPlayerMP entityplayermp = ((EntityPlayerMP) entity);
+                        for (EntityTrackerEntry entitytrackerentry1 : this.entries) {
+                            if (entitytrackerentry1.getTrackedEntity() != entityplayermp) {
+                                entitytrackerentry1.updatePlayerEntity(entityplayermp);
+                            }
+                        }
+                    }
                 }
+            }finally {
+                MKConfig.workerGroup.removeThread();
             }
-        }
+        });
+        trackerExecutor.submit(task).join();
     }
 
     public void updateVisibility(EntityPlayerMP player)
@@ -339,6 +318,25 @@
         }
     }
 
+    /* ======================================== FORGE START =====================================*/
+
+    // don't expose the EntityTrackerEntry directly so mods can't mess with the data in there as easily
+    /**
+     * Get all players tracking the given Entity. The Entity must be part of the World that this Tracker belongs to.
+     * @param entity the Entity
+     * @return all players tracking the Entity
+     */
+    public Set<? extends net.minecraft.entity.player.EntityPlayer> getTrackingPlayers(Entity entity)
+    {
+        EntityTrackerEntry entry = (EntityTrackerEntry) trackedEntityHashTable.lookup(entity.getEntityId());
+        if (entry == null)
+            return java.util.Collections.emptySet();
+        else
+            return java.util.Collections.unmodifiableSet(entry.trackingPlayers);
+    }
+
+    /* ======================================== FORGE END   =====================================*/
+
     public void sendToTrackingAndSelf(Entity entityIn, Packet<?> packetIn)
     {
         EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
@@ -359,11 +357,7 @@
 
     public void sendLeashedEntitiesInChunk(EntityPlayerMP player, Chunk chunkIn)
     {
-        List<Entity> list = Lists.<Entity>newArrayList();
-        List<Entity> list1 = Lists.<Entity>newArrayList();
-
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
+        ParallelListTraverse<EntityTrackerEntry> task = new ParallelListTraverse<>(this.entries,this.trackerExecutor.getParallelism(),entitytrackerentry->{
             Entity entity = entitytrackerentry.getTrackedEntity();
 
             if (entity != player && entity.chunkCoordX == chunkIn.x && entity.chunkCoordZ == chunkIn.z)
@@ -372,31 +366,16 @@
 
                 if (entity instanceof EntityLiving && ((EntityLiving)entity).getLeashHolder() != null)
                 {
-                    list.add(entity);
+                    player.connection.sendPacket(new SPacketEntityAttach(entity, ((EntityLiving)entity).getLeashHolder()));
                 }
 
                 if (!entity.getPassengers().isEmpty())
                 {
-                    list1.add(entity);
+                    player.connection.sendPacket(new SPacketSetPassengers(entity));
                 }
             }
-        }
-
-        if (!list.isEmpty())
-        {
-            for (Entity entity1 : list)
-            {
-                player.connection.sendPacket(new SPacketEntityAttach(entity1, ((EntityLiving)entity1).getLeashHolder()));
-            }
-        }
-
-        if (!list1.isEmpty())
-        {
-            for (Entity entity2 : list1)
-            {
-                player.connection.sendPacket(new SPacketSetPassengers(entity2));
-            }
-        }
+        });
+        this.trackerExecutor.submit(task).join();
     }
 
     public void setViewDistance(int p_187252_1_)
